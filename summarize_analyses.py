import pandas as pd
import openai
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
import logging
from openai import OpenAI, APIError
import markdown  # Import the markdown library

# Configure logging globally
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # We only need OPENAI_API_KEY for summarization
openai.api_key = OPENAI_API_KEY


def summarize_lesson_analyses(analysis_dir="lesson_analyses", model="gpt-4o-mini"):
    """
    Reads lesson analysis files, summarizes them using GPT, and provides prioritized recommendations,
    including high-level summary and lesson-specific insights.
    """
    combined_analysis_text = ""
    lesson_analyses_data = []  # List to store lesson title and analysis for detailed output

    # Read and combine analysis from each file
    for filename in os.listdir(analysis_dir):
        if filename.startswith("lesson_analysis_lesson_") and filename.endswith(".txt"):
            filepath = os.path.join(analysis_dir, filename)
            try:
                with open(filepath, "r") as f:
                    analysis_content = f.read()
                    # Extract lesson title from the first line of the file
                    lesson_title_line = analysis_content.split('\n')[0]
                    lesson_title = lesson_title_line.split("'")[1] if "'" in lesson_title_line else filename
                    lesson_analyses_data.append({"title": lesson_title, "analysis": analysis_content})  # Store for detailed output
                    combined_analysis_text += f"\n\n---START LESSON ANALYSIS: {lesson_title}---\n{analysis_content}"
            except Exception as e:
                logger.error(f"Error reading analysis file {filename}: {e}")
                continue

    if not combined_analysis_text:
        logger.info("No lesson analysis files found to summarize.")
        return None, None

    prompt = f"""
    You are an expert learning and curriculum designer, providing insights to improve a coding education platform. Analyze the following lesson concept analyses generated by GPT-4o. Each analysis identifies student struggles and areas of understanding within a specific lesson.

    Your goal is to produce a structured report with two main parts:

    **Part 1: Executive Summary - Top Curriculum Improvement Priorities**

    1.  **Identify the TOP 3-5 KEY RECURRING CHALLENGES or areas of struggle that appear MOST FREQUENTLY and are MOST CRITICAL across MULTIPLE LESSONS.** Focus on fundamental concepts or skills.
    2.  For each key challenge, provide:
        *   A concise description of the challenge.
        *   Specific examples or quotes (if available in the analyses) to illustrate the struggle.
        *   A **Severity Level** (High, Medium, Low) indicating the impact of this challenge on student learning progression.
        *   **Actionable Recommendations** for curriculum improvement, focusing on *how* to address this challenge (e.g., "revise lesson X to include...", "create a new exercise on...", "add a clearer explanation of..."). Prioritize recommendations that are concrete and directly implementable.

    **Part 2: Detailed Lesson-Specific Insights for Coaches**

    For EACH lesson analyzed, provide a bulleted list of "Opportunity Insights for Coaches". Each insight should be a concise statement of an area where students are struggling in that specific lesson and a concrete suggestion for coaches to address it in their interactions with students. Format each insight as:

    - **[Area of Struggle]:** [Specific, actionable suggestion for coaches to address this struggle with students.]

    Ensure this section is easily scannable and directly useful for coaches reviewing individual lesson performance. Aim for 1-3 insights per lesson, focusing on the most pertinent points.

    **Formatting Requirements:**

    *   Use Markdown formatting for headings, bullet points, and emphasis.
    *   Clearly separate Part 1 and Part 2 with distinct headings.
    *   For Part 1, format each key challenge with a clear heading, description, examples, severity level, and actionable recommendations.
    *   For Part 2, use a clear "**Lesson Title:** [Lesson Title]" heading for each lesson, followed by the bulleted "Opportunity Insights".

    Here are the lesson concept analyses:
    {combined_analysis_text}

    --- END LESSON ANALYSES ---

    Generate the report as described above, focusing on actionable insights for curriculum improvement and coach guidance.
    """

    logger.info("Generating overall analysis summary using GPT...")
    try:
        response = openai.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        summary_output = response.choices[0].message.content
        return summary_output, lesson_analyses_data  # Return both summary and lesson analysis data

    except Exception as e:
        logger.error(f"Error during overall analysis summarization with OpenAI: {e}")
        return None, None


def format_lesson_insights_for_output(lesson_analyses_data, overall_summary):
    """Formats the overall summary and lesson-specific insights for output."""
    output_text = "## Overall Learning Platform Content Analysis Summary and Recommendations\n\n"
    output_text += "### Part 1: Executive Summary - Top Curriculum Improvement Priorities\n\n"
    output_text += overall_summary + "\n\n"  # Add overall summary

    output_text += "### Part 2: Detailed Lesson-Specific Insights for Coaches\n\n"  # Section header for lesson insights
    for lesson_data in lesson_analyses_data:
        lesson_title = lesson_data["title"]
        analysis_content = lesson_data["analysis"]

        output_text += f"**Lesson Title:** {lesson_title}\n"  # Lesson title

        # More robustly extract struggles - look for section containing "Struggling"
        struggles_section_start = analysis_content.find("### 1. Concepts or Topics Students are **Struggling** to Understand:")
        if struggles_section_start == -1:  # If exact header not found, try a more general search
            struggles_section_start = analysis_content.find(
                "Concepts or Topics Students are **Struggling**"
            )  # Look for partial match

        understanding_section_start = analysis_content.find(
            "### 2. Concepts or Topics Students Seem to **Understand Well**:"
        )

        if struggles_section_start != -1 and understanding_section_start != -1:
            struggles_text = analysis_content[struggles_section_start:understanding_section_start].strip()
            struggles_insights = []
            for line in struggles_text.split('\n'):  # Split by lines
                line = line.strip()
                if line.startswith("- ") and "Struggling" not in line and "Concepts or Topics" not in line:  # Improved condition
                    insight_text = line[2:].strip()  # Remove "- " prefix and strip whitespace
                    if insight_text:  # Ensure insight text is not empty
                        struggles_insights.append(insight_text)

            if struggles_insights:
                output_text += "#### Opportunity Insights for Coaches:\n"  # Sub-heading for insights
                for insight in struggles_insights:
                    output_text += f"- {insight}\n"  # Bulleted insights
            else:
                output_text += "- No specific student struggles identified in the analysis for this lesson.\n"  # More informative message
        else:
            output_text += "- No student struggles data found in the analysis for this lesson. Review full analysis file for details.\n"  # More informative message

        output_text += "\n"  # Add space between lessons

    return output_text


if __name__ == "__main__":
    overall_summary, lesson_analyses_data = summarize_lesson_analyses()  # Get both summary and lesson data

    if overall_summary:
        formatted_output_markdown = format_lesson_insights_for_output(lesson_analyses_data, overall_summary)  # Get Markdown formatted output
        formatted_output_html = markdown.markdown(formatted_output_markdown)  # Convert Markdown to HTML

        filepath_markdown = "overall_analysis_summary.md"  # Save as Markdown too, for flexibility
        filepath_html = "overall_analysis_summary.html"  # Save as HTML

        try:
            with open(filepath_markdown, "w") as f_md:
                f_md.write(formatted_output_markdown)  # Save Markdown
            logger.info(f"Overall analysis summary (Markdown) saved to: {filepath_markdown}")

            with open(filepath_html, "w") as f_html:
                f_html.write(formatted_output_html)  # Save HTML
            logger.info(f"Overall analysis summary (HTML) saved to: {filepath_html}")

        except Exception as e:
            logger.error(f"Error saving overall analysis summary to file: {e}")
    else:
        logger.error("Failed to generate overall analysis summary.")

    logger.info("Summarization script finished.")